<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Amazon Stock Price Analysis</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"
      crossorigin="anonymous"
    />
    <link href="/static/style.css" rel="stylesheet" />
  </head>
  <body>
    <div class="container-sm-25">
      <h1 class="text-center">Select the resources for simulation:</h1>
      <div class="container-sm w-50">
        <form id="form" action="/input">
          <div class="form-group row m-4">
            <label for="S" class="col-sm-3 col-form-label">
              Scalable resource (S):
            </label>
            <div class="col-sm-8">
              <select
                class="form-control"
                id="S"
                name="S"
                onchange="handleResourceSelect(event)"
              >
                <option disabled selected>Select a resource</option>
                <option value="lambda">
                  Lambda (Invoke the lambda R times using threading)
                </option>
                <option value="ec2">
                  EC2 (Provision R instances of EC2 and run them parallally)
                </option>
              </select>
            </div>
          </div>
          <div class="form-group row m-4">
            <label for="R" class="col-sm-3 col-form-label">
              Number of instances (R) :
            </label>
            <div class="col-sm-8">
              <select class="form-control" id="R" name="R">
                <option selected>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
              </select>
            </div>
          </div>

          <!-- inputs -->
          <div class="form-group row m-4">
            <label for="D" class="col-sm-3 col-form-label"
              >Number of shots</label
            >
            <div class="col-sm-8">
              <input
                type="number"
                class="form-control"
                id="D"
                name="D"
                oninput="handleInputChange(event)"
              />
            </div>
          </div>
          <div class="form-group row m-4">
            <label for="H" class="col-sm-3 col-form-label">History</label>
            <div class="col-sm-8">
              <input
                type="number"
                class="form-control"
                id="H"
                name="H"
                oninput="handleInputChange(event)"
              />
            </div>
          </div>
          <div class="form-group row m-4">
            <label for="P" class="col-sm-3 col-form-label"
              >Profitability time</label
            >
            <div class="col-sm-8">
              <input
                type="number"
                class="form-control"
                id="P"
                name="P"
                oninput="handleInputChange(event)"
              />
            </div>
          </div>
          <div class="form-group row m-4">
            <label for="T" class="col-sm-3 col-form-label"
              >Type of Signal</label
            >
            <div class="col-sm-8 py-2" id="T">
              <div class="form-check form-check-inline">
                <input
                  class="form-check-input"
                  type="radio"
                  value="Buy"
                  name="T"
                  onchange="handleInputChange(event)"
                  checked
                />
                <label class="form-check-label">Buy</label>
              </div>
              <div class="form-check form-check-inline">
                <input
                  class="form-check-input"
                  type="radio"
                  value="Sell"
                  name="T"
                  onchange="handleInputChange(event)"
                />
                <label class="form-check-label">Sell</label>
              </div>
            </div>
          </div>
          <!-- inputs -->

          <div class="form-group row m-4 hide" id="warmUpLambda" disabled>
            <button
              type="button"
              class="btn btn-primary col-sm-10"
              onclick="warmUpLambda(event)"
              id="warmUpLambdaButton"
              disabled
            >
              Warm up Lambda
            </button>
            <div
              id="warmUpLambdaSpinner"
              class="spinner-border text-primary mx-5 my-1 hide"
            ></div>
          </div>
          <div class="form-group row m-4 hide" id="provisionEc2" disabled>
            <button
              type="button"
              class="btn btn-primary col-sm-10"
              onclick="provisionEc2(event)"
              id="provisionEc2Button"
              disabled
            >
              Provision EC2 instance(s)
            </button>
            <div
              id="provisionEc2Spinner"
              class="spinner-border text-primary mx-5 my-1 hide"
            ></div>
          </div>
          <div class="form-group row m-4 hide" id="simulate">
            <button
              type="button"
              class="btn btn-primary col-sm-10"
              onclick="simulate(event)"
            >
              Simulate
            </button>
            <div
              id="simulateSpinner"
              class="spinner-border text-primary mx-5 my-1 hide"
            ></div>
          </div>
          <div class="form-group row m-4 hide" id="goToResults">
            <button type="submit" class="btn btn-success col-sm-10">
              Go to results
            </button>
          </div>

          <!-- <div class="form-group row m-4 hide" id="gotoInputs">
            <button type="submit" class="btn btn-success col-sm-10">
              Go to inputs page
            </button>
          </div> -->
        </form>
      </div>
    </div>
    <!-- <div style="position: absolute; top: 0; right: 0">
      <div
        id="toast"
        class="toast"
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
        data-autohide="true"
        data-delay="500"
      >
        <div class="toast-body">Hello, world! This is a toast message.</div>
      </div>
    </div> -->

    <!-- <script type="text/javascript" src="/scripts/index.js"></script> -->
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script type="text/javascript">
      const warmUpLambdaDiv = document.getElementById("warmUpLambda");
      const warmUpLambdaButton = document.getElementById("warmUpLambdaButton");
      const provisionEc2Div = document.getElementById("provisionEc2");
      const provisionEc2Button = document.getElementById("provisionEc2Button");
      const goToResultsDiv = document.getElementById("goToResults");
      const warmUpLambdaSpinner = document.getElementById(
        "warmUpLambdaSpinner"
      );
      const simulateDiv = document.getElementById("simulate");
      const toast = document.getElementById("toast");
      const form = document.getElementById("form");
      const S = document.getElementById("S");
      const R = document.getElementById("R");
      const D = document.getElementById("D");
      const H = document.getElementById("H");
      const P = document.getElementById("P");
      const T = document.getElementsByName("T");

      var ipList = [];

      function disableInputs() {
        S.disabled = true;
        R.disabled = true;
        D.disabled = true;
        H.disabled = true;
        P.disabled = true;
        T.forEach((t) => (t.disabled = true));
      }

      function handleResourceSelect(ev) {
        option = ev.target.value;

        if (option == "lambda") {
          warmUpLambdaDiv.classList.remove("hide");
          provisionEc2Div.classList.add("hide");
        } else if (option == "ec2") {
          provisionEc2Div.classList.remove("hide");
          warmUpLambdaDiv.classList.add("hide");
        }
        handleInputChange();
      }

      function handleInputChange() {
        if (D.value && H.value && P.value) {
          if (S.value == "lambda") {
            warmUpLambdaButton.disabled = false;
            provisionEc2Button.disabled = true;
          } else {
            provisionEc2Button.disabled = false;
            warmUpLambdaButton.disabled = true;
          }
        } else {
          provisionEc2Button.disabled = true;
          warmUpLambdaButton.disabled = true;
        }
      }

      function warmUpLambda(ev) {
        warmUpLambdaSpinner.classList.remove("hide");
        fetch("/warm_up")
          .then((data) => {
            return data.json();
          })
          .then((res) => {
            console.log(res);
            warmUpLambdaSpinner.classList.add("hide");
            // toast.classList.add("show");
            simulateDiv.classList.remove("hide");
          });
        disableInputs();
      }

      function provisionEc2(ev) {
        ipList = [];
        provisionEc2Spinner.classList.remove("hide");
        fetch("/provision_ec2?" + new URLSearchParams({ R: R.value }))
          .then((data) => {
            return data.json();
          })
          .then((res) => {
            console.log(res);
            ipList = res.ip_list;
            provisionEc2Spinner.classList.add("hide");
            // toast.classList.add("show");
            simulateDiv.classList.remove("hide");
            provisionEc2Button.disabled = true;
          });
        disableInputs();
      }

      function simulate(ev) {
        simulateSpinner.classList.remove("hide");
        var typeOfSignal;
        T.forEach((t) => {
          if (t.checked) typeOfSignal = t.value;
        });
        args = {
          S: S.value,
          R: R.value,
          D: D.value,
          H: H.value,
          P: P.value,
          T: typeOfSignal,
          ipList: ipList,
        };
        fetch("/simulate", {
          method: "POST",
          body: JSON.stringify(args),
          headers: {
            "Content-type": "application/json; charset=UTF-8",
          },
        })
          .then((data) => {
            return data.json();
          })
          .then((res) => {
            console.log(res);
            simulateSpinner.classList.add("hide");
            goToResultsDiv.classList.remove("hide");
          });
      }
    </script>
  </body>
</html>
